/**
 * Created by cfraser on 2014-04-27.
 */


( function () {
/*
 Problem 1
 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

 Find the sum of all the multiples of 3 or 5 below 1000.

 Resources:
 1) http://www.algebra.com/algebra/homework/Sequences-and-series.faq.question.427328.html

 Sn = (n/2) * (a1 + an)

 Sn = the sum of the n terms in the sequence.
 a1 = the first term in the sequence.
 an = the nth term in the sequence.

 2) http://stackoverflow.com/questions/3762589/fastest-javascript-summation


*/
    var problemOne = function (multiples, limit) {
        var terms = [],
            an = 0,
            a1 = 0,
            answer = 0;

        var largestMultiple = function (multiple, limit) {
            var largestMultiple;
            // quickly find the largest multiple under the limit
            for (largestMultiple = limit - 1; largestMultiple > 0; largestMultiple--) {
                if (largestMultiple % multiple == 0) {
                        break;
                }
            }

            return largestMultiple;
        }

        var sumMultiples = function (number, limit) {
            var sumMultiples = 0,
                largest = largestMultiple(number, limit);

            for (var x = 1; x <= largest / number; x++) {
                sumMultiples += number * x;
            }

            return sumMultiples;
        }


        for (var x = 0; x < multiples.length; x++) {
            answer += sumMultiples(multiples[x], limit);

        }

        // TODO: We know that we're only getting two items in the array. This could
        // TODO: be refactored later to support an unknown array size.
        var commonMultiple = multiples[0] * multiples[1];

        // remove one set of common multiples, since we added the common multiples twice.
        answer -= sumMultiples(commonMultiple, limit);

        return answer;
    }

/*
 Problem 2.

 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

 Resources:

 1) My brain. ;) - this seems pretty straight forward when I read the problem.

 */
    var problemTwo = function (limit) {
        var values = [0, 1],
            sum = 0,
            answer = 0;

        // I'd probably break this out into a utility library if this problem wasn't so
        // self contained.
        var isEven = function( value ) {
            if (value % 2 == 0) {
                return true;
            }
            else {
                return false;
            }
        }

        while (sum < limit) {
            sum = values[0] + values [1];

            // This seems like the cleanest way to sum the elements of the sequence.
            // Just add the latest sum to the right most side of the array, and drop the left most.
            values.push(sum);
            values.shift();

            if (isEven(sum)) {
                answer += sum;
            }
        }

        return answer;
    }



})
